/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TribeVaultFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LEADER_REGISTRY"
      | "Terminal"
      | "allVaults"
      | "createVault"
      | "followerVaults"
      | "getAllVaults"
      | "getLeaderFollowerCount"
      | "getLeaderTvl"
      | "getLeaderVaults"
      | "getVault"
      | "isValidVault"
      | "isVault"
      | "leaderFollowerVaults"
      | "owner"
      | "renounceOwnership"
      | "setTerminal"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "TerminalUpdated"
      | "VaultCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "LEADER_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Terminal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allVaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "followerVaults",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderFollowerCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderTvl",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderVaults",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "leaderFollowerVaults",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTerminal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "LEADER_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Terminal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "followerVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderFollowerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderTvl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leaderFollowerVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTerminal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TerminalUpdatedEvent {
  export type InputTuple = [oldTerminal: AddressLike, newTerminal: AddressLike];
  export type OutputTuple = [oldTerminal: string, newTerminal: string];
  export interface OutputObject {
    oldTerminal: string;
    newTerminal: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultCreatedEvent {
  export type InputTuple = [
    follower: AddressLike,
    leader: AddressLike,
    vault: AddressLike,
    performanceFee: BigNumberish
  ];
  export type OutputTuple = [
    follower: string,
    leader: string,
    vault: string,
    performanceFee: bigint
  ];
  export interface OutputObject {
    follower: string;
    leader: string;
    vault: string;
    performanceFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TribeVaultFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TribeVaultFactory;
  waitForDeployment(): Promise<this>;

  interface: TribeVaultFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LEADER_REGISTRY: TypedContractMethod<[], [string], "view">;

  Terminal: TypedContractMethod<[], [string], "view">;

  allVaults: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createVault: TypedContractMethod<
    [leader: AddressLike],
    [string],
    "nonpayable"
  >;

  followerVaults: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [string],
    "view"
  >;

  getAllVaults: TypedContractMethod<[], [string[]], "view">;

  getLeaderFollowerCount: TypedContractMethod<
    [leader: AddressLike],
    [bigint],
    "view"
  >;

  getLeaderTvl: TypedContractMethod<
    [leader: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getLeaderVaults: TypedContractMethod<
    [leader: AddressLike],
    [string[]],
    "view"
  >;

  getVault: TypedContractMethod<
    [follower: AddressLike, leader: AddressLike],
    [string],
    "view"
  >;

  isValidVault: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isVault: TypedContractMethod<[_vault: AddressLike], [boolean], "view">;

  leaderFollowerVaults: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setTerminal: TypedContractMethod<
    [_terminal: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LEADER_REGISTRY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "Terminal"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allVaults"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createVault"
  ): TypedContractMethod<[leader: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "followerVaults"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllVaults"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getLeaderFollowerCount"
  ): TypedContractMethod<[leader: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLeaderTvl"
  ): TypedContractMethod<
    [leader: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLeaderVaults"
  ): TypedContractMethod<[leader: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVault"
  ): TypedContractMethod<
    [follower: AddressLike, leader: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidVault"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVault"
  ): TypedContractMethod<[_vault: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "leaderFollowerVaults"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTerminal"
  ): TypedContractMethod<[_terminal: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TerminalUpdated"
  ): TypedContractEvent<
    TerminalUpdatedEvent.InputTuple,
    TerminalUpdatedEvent.OutputTuple,
    TerminalUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultCreated"
  ): TypedContractEvent<
    VaultCreatedEvent.InputTuple,
    VaultCreatedEvent.OutputTuple,
    VaultCreatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TerminalUpdated(address,address)": TypedContractEvent<
      TerminalUpdatedEvent.InputTuple,
      TerminalUpdatedEvent.OutputTuple,
      TerminalUpdatedEvent.OutputObject
    >;
    TerminalUpdated: TypedContractEvent<
      TerminalUpdatedEvent.InputTuple,
      TerminalUpdatedEvent.OutputTuple,
      TerminalUpdatedEvent.OutputObject
    >;

    "VaultCreated(address,address,address,uint16)": TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;
    VaultCreated: TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;
  };
}

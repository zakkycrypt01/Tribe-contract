/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TribeCopyVault {
  export type PositionStruct = {
    protocol: AddressLike;
    token0: AddressLike;
    token1: AddressLike;
    liquidity: BigNumberish;
    tokenId: BigNumberish;
    isActive: boolean;
  };

  export type PositionStructOutput = [
    protocol: string,
    token0: string,
    token1: string,
    liquidity: bigint,
    tokenId: bigint,
    isActive: boolean
  ] & {
    protocol: string;
    token0: string;
    token1: string;
    liquidity: bigint;
    tokenId: bigint;
    isActive: boolean;
  };
}

export interface TribeCopyVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FOLLOWER"
      | "LEADER"
      | "TERMINAL"
      | "activateEmergencyMode"
      | "activePositions"
      | "calculatePnL"
      | "closeUniswapV3PositionByPair"
      | "deposit"
      | "depositedCapital"
      | "emergencyMode"
      | "emergencyWithdraw"
      | "getActivePositionCount"
      | "getAllPositions"
      | "getVaultValue"
      | "highWaterMark"
      | "lastActivityTime"
      | "mirrorClosePosition"
      | "mirrorMintUniswapV3"
      | "mirrorPosition"
      | "mirrorRebalance"
      | "owner"
      | "performanceFeePercent"
      | "positions"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposited"
      | "EmergencyModeActivated"
      | "OwnershipTransferred"
      | "PerformanceFeeCollected"
      | "PositionClosed"
      | "PositionMinted"
      | "PositionMirrored"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "FOLLOWER", values?: undefined): string;
  encodeFunctionData(functionFragment: "LEADER", values?: undefined): string;
  encodeFunctionData(functionFragment: "TERMINAL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activePositions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePnL",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeUniswapV3PositionByPair",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositedCapital",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePositionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "highWaterMark",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastActivityTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorClosePosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorMintUniswapV3",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorPosition",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorRebalance",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "FOLLOWER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LEADER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TERMINAL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePnL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeUniswapV3PositionByPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositedCapital",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivePositionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "highWaterMark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastActivityTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorMintUniswapV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositedEvent {
  export type InputTuple = [follower: AddressLike, amount: BigNumberish];
  export type OutputTuple = [follower: string, amount: bigint];
  export interface OutputObject {
    follower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyModeActivatedEvent {
  export type InputTuple = [follower: AddressLike];
  export type OutputTuple = [follower: string];
  export interface OutputObject {
    follower: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerformanceFeeCollectedEvent {
  export type InputTuple = [leader: AddressLike, amount: BigNumberish];
  export type OutputTuple = [leader: string, amount: bigint];
  export interface OutputObject {
    leader: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionClosedEvent {
  export type InputTuple = [positionId: BigNumberish];
  export type OutputTuple = [positionId: bigint];
  export interface OutputObject {
    positionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionMintedEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    tokenId: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    tokenId: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    tokenId: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionMirroredEvent {
  export type InputTuple = [
    protocol: AddressLike,
    token0: AddressLike,
    token1: AddressLike,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    protocol: string,
    token0: string,
    token1: string,
    liquidity: bigint
  ];
  export interface OutputObject {
    protocol: string;
    token0: string;
    token1: string;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    follower: AddressLike,
    amount: BigNumberish,
    performanceFee: BigNumberish
  ];
  export type OutputTuple = [
    follower: string,
    amount: bigint,
    performanceFee: bigint
  ];
  export interface OutputObject {
    follower: string;
    amount: bigint;
    performanceFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TribeCopyVault extends BaseContract {
  connect(runner?: ContractRunner | null): TribeCopyVault;
  waitForDeployment(): Promise<this>;

  interface: TribeCopyVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FOLLOWER: TypedContractMethod<[], [string], "view">;

  LEADER: TypedContractMethod<[], [string], "view">;

  TERMINAL: TypedContractMethod<[], [string], "view">;

  activateEmergencyMode: TypedContractMethod<[], [void], "nonpayable">;

  activePositions: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  calculatePnL: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  closeUniswapV3PositionByPair: TypedContractMethod<
    [
      adapter: AddressLike,
      positionManager: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositedCapital: TypedContractMethod<[], [bigint], "view">;

  emergencyMode: TypedContractMethod<[], [boolean], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  getActivePositionCount: TypedContractMethod<[], [bigint], "view">;

  getAllPositions: TypedContractMethod<
    [],
    [TribeCopyVault.PositionStructOutput[]],
    "view"
  >;

  getVaultValue: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  highWaterMark: TypedContractMethod<[], [bigint], "view">;

  lastActivityTime: TypedContractMethod<[], [bigint], "view">;

  mirrorClosePosition: TypedContractMethod<
    [positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  mirrorMintUniswapV3: TypedContractMethod<
    [
      adapter: AddressLike,
      positionManager: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      fee: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        positionId: bigint;
        tokenId: bigint;
        liquidity: bigint;
      }
    ],
    "nonpayable"
  >;

  mirrorPosition: TypedContractMethod<
    [
      protocol: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      liquidity: BigNumberish,
      arg4: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  mirrorRebalance: TypedContractMethod<
    [positionId: BigNumberish, newLiquidity: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  performanceFeePercent: TypedContractMethod<[], [bigint], "view">;

  positions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, boolean] & {
        protocol: string;
        token0: string;
        token1: string;
        liquidity: bigint;
        tokenId: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FOLLOWER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LEADER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TERMINAL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activateEmergencyMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activePositions"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "calculatePnL"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "closeUniswapV3PositionByPair"
  ): TypedContractMethod<
    [
      adapter: AddressLike,
      positionManager: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositedCapital"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActivePositionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllPositions"
  ): TypedContractMethod<[], [TribeCopyVault.PositionStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getVaultValue"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "highWaterMark"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastActivityTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mirrorClosePosition"
  ): TypedContractMethod<[positionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mirrorMintUniswapV3"
  ): TypedContractMethod<
    [
      adapter: AddressLike,
      positionManager: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      fee: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        positionId: bigint;
        tokenId: bigint;
        liquidity: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mirrorPosition"
  ): TypedContractMethod<
    [
      protocol: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      liquidity: BigNumberish,
      arg4: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mirrorRebalance"
  ): TypedContractMethod<
    [positionId: BigNumberish, newLiquidity: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performanceFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, boolean] & {
        protocol: string;
        token0: string;
        token1: string;
        liquidity: bigint;
        tokenId: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyModeActivated"
  ): TypedContractEvent<
    EmergencyModeActivatedEvent.InputTuple,
    EmergencyModeActivatedEvent.OutputTuple,
    EmergencyModeActivatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PerformanceFeeCollected"
  ): TypedContractEvent<
    PerformanceFeeCollectedEvent.InputTuple,
    PerformanceFeeCollectedEvent.OutputTuple,
    PerformanceFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "PositionClosed"
  ): TypedContractEvent<
    PositionClosedEvent.InputTuple,
    PositionClosedEvent.OutputTuple,
    PositionClosedEvent.OutputObject
  >;
  getEvent(
    key: "PositionMinted"
  ): TypedContractEvent<
    PositionMintedEvent.InputTuple,
    PositionMintedEvent.OutputTuple,
    PositionMintedEvent.OutputObject
  >;
  getEvent(
    key: "PositionMirrored"
  ): TypedContractEvent<
    PositionMirroredEvent.InputTuple,
    PositionMirroredEvent.OutputTuple,
    PositionMirroredEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Deposited(address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "EmergencyModeActivated(address)": TypedContractEvent<
      EmergencyModeActivatedEvent.InputTuple,
      EmergencyModeActivatedEvent.OutputTuple,
      EmergencyModeActivatedEvent.OutputObject
    >;
    EmergencyModeActivated: TypedContractEvent<
      EmergencyModeActivatedEvent.InputTuple,
      EmergencyModeActivatedEvent.OutputTuple,
      EmergencyModeActivatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PerformanceFeeCollected(address,uint256)": TypedContractEvent<
      PerformanceFeeCollectedEvent.InputTuple,
      PerformanceFeeCollectedEvent.OutputTuple,
      PerformanceFeeCollectedEvent.OutputObject
    >;
    PerformanceFeeCollected: TypedContractEvent<
      PerformanceFeeCollectedEvent.InputTuple,
      PerformanceFeeCollectedEvent.OutputTuple,
      PerformanceFeeCollectedEvent.OutputObject
    >;

    "PositionClosed(uint256)": TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;
    PositionClosed: TypedContractEvent<
      PositionClosedEvent.InputTuple,
      PositionClosedEvent.OutputTuple,
      PositionClosedEvent.OutputObject
    >;

    "PositionMinted(uint256,uint256,uint256)": TypedContractEvent<
      PositionMintedEvent.InputTuple,
      PositionMintedEvent.OutputTuple,
      PositionMintedEvent.OutputObject
    >;
    PositionMinted: TypedContractEvent<
      PositionMintedEvent.InputTuple,
      PositionMintedEvent.OutputTuple,
      PositionMintedEvent.OutputObject
    >;

    "PositionMirrored(address,address,address,uint256)": TypedContractEvent<
      PositionMirroredEvent.InputTuple,
      PositionMirroredEvent.OutputTuple,
      PositionMirroredEvent.OutputObject
    >;
    PositionMirrored: TypedContractEvent<
      PositionMirroredEvent.InputTuple,
      PositionMirroredEvent.OutputTuple,
      PositionMirroredEvent.OutputObject
    >;

    "Withdrawn(address,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
